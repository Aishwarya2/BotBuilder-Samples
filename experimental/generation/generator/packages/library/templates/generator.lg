> This file contains templates to help with the generation process

> TODO: Remove this when EOL is part of expressions, then it will be os specific as opposed to windows specifice.
# EOL
-\r\n

# propertyFilename
- ${locale}/${property}/${prefix}-${property}.${locale}.lg

# entityLGFilename
- ${locale}/${property}/${prefix}-${property}Entity.${locale}.lg

# entityLUFilename
- ${locale}/${property}/${prefix}-${property}Entity.${locale}.lu

# missingFilename
- ${property}/${prefix}-${property}-missing.dialog

# builtinEntityFilename(entity)
- ${locale}/${property}/${prefix}-${property}-${entity}.${locale}.lu

# addFilename(entity)
- ${property}/${prefix}-${property}-add-${entity}.dialog

# removeFilename(entity)
- ${property}/${prefix}-${property}-remove-${entity}.dialog

# clearFilename
- ${property}/${prefix}-${property}-clear.dialog

# showFilename
- ${property}/${prefix}-${property}-show.dialog

# chooseEntityFilename
- ${property}/${prefix}-${property}Entity-choose.dialog

# libraryFilename(name)
- library/${prefix}-${name}

# localePath(path)
- ${substring(path, max(indexOf(path, '\\'), indexOf(path, '/')) + 1)}

# nameTemplate
-```
> Template for generating display text for the name of the '${property}' property.
# ${property}_getPropertyNameText
- ${phrase(property, locale)}```

# valueTemplate
-```
> Template for generating display text for the value of the '${property}' property.
# ${property}_getValueText(val)
 - IF: \${val}
 - \${val}
 - ELSE:
 - no value
```

# entityDisplay
-```
> Template for generating display text for the value of the '${property}Entity' entity.
# ${property}Entity_getValueText(val)
 - IF: \${val}
 - \${val}
 - ELSE:
 - no value
```

# addDialog(entity)
-```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Add(${property})",
    "entity": "${entity}",
    "actions": [
        {
            "$kind": "Microsoft.SendActivity",
            "activity": "\${getSetPropertyText('${property}', @${entity})}"
        },
        {
            "$kind": "Microsoft.SetProperty",
            "property": "$${property}",
            "value": "=@${entity}"          
        },
        {
            "$kind": "Microsoft.IfCondition",
            "condition": "$PropertyToChange == '${property}'",
            "actions": [
                {
                    "$kind":"Microsoft.DeleteProperty",
                    "property": "$PropertyToChange"
                }
            ]
        }
    ]               
    ${designerOpEntity('Add', entity)}      
}
```

# addArrayDialog(entity)
-```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Add(${property})",
    "entity": "${entity}",
    "actions": [
        {
            "$kind": "Microsoft.SendActivity",
            "activity": "\${getSetArrayPropertyText('${property}', @${entity})}"
        },
        {
            "$kind": "Microsoft.EditArray",
            "changeType": "push",
            "itemsProperty": "$${property}",
            "value": "=@${entity}"
        },
        {
            "$kind": "Microsoft.IfCondition",
            "condition": "$PropertyToChange == '${property}'",
            "actions": [
                {
                    "$kind":"Microsoft.DeleteProperty",
                    "property": "$PropertyToChange"
                }
            ]
        }
    ]               
    ${designerOpEntity('Add', entity)}     
}
```

# removeDialog(entity)
-```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Remove(${property})",
    "entity": "${entity}",
    "actions": [

        {
            "$kind": "Microsoft.IfCondition",
            "condition":"$${property} == @${entity}",
            "actions": [
                {
                    "$kind": "Microsoft.SendActivity",
                    "activity": "\${getRemovePropertyText('${property}', @${entity})}"
                },  
                {
                    "$kind": "Microsoft.DeleteProperty",
                    "property": "${property}"
                }
            ]
        }
    ]               
    ${designerOpEntity('Remove', entity)}     
}
```

# removeArrayDialog(entity)
-```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Remove(${property})",
    "entity": "${entity}",
    "actions": [
        {
            "$kind": "Microsoft.SendActivity",
            "activity": "\${getRemoveArrayPropertyText('${property}', @${entity})}"
        },
        {
            "$kind": "Microsoft.EditArray",
            "changeType": "remove",
            "itemsProperty": "$${property}",
            "value": "=@${entity}"
        }
    ]               
    ${designerOpEntity('Remove', entity)}     
}
```

# clearDialog
-```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Clear(${property})",
    "actions": [
        {
            "$kind": "Microsoft.SendActivity",
            "activity": "\${getClearPropertyText('${property}')}"
        },
        {
            "$kind": "Microsoft.DeleteProperty",
            "property": "$${property}"
        }
    ]               
    ${designerOp('Clear')}     
}
```

# showDialog
-```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnAssignEntity",
    "operation": "Show(${property})",
    "actions": [
        {
            "$kind": "Microsoft.SendActivity",
            "activity": "\${getShowPropertyText(@PROPERTYName)}"
        }
    ]               
    ${designerOp('Show')}     
}
```

# missingDialog
- ```
{
    "$schema": "${appSchema}",
    "$kind": "Microsoft.OnEndOfActions",
    "condition":"=!$${property} || $PropertyToChange == '${property}'",
    "priority": "=indexOf(dialog.requiredProperties, '${property}')",
    "actions": [       
        {
            "$kind": "Microsoft.Ask",
            "activity": "\${${property}_getPromptText()}",
            "expectedProperties": [
                "${property}"
            ]
        }
    ]
    ${designerMissing(property)}     
}
```

> Define operation entities for '${property}' property.
# operations(entity, values, label)
- IF: ${examples}
- ${generateOperations(entity, examples, label)}
- ELSEIF: ${values}
- ${generateOperations(entity, values, label)}
- ELSE:
- ${generateOperations(entity, [`**${entity}1**`, `**${entity}2**`, `**${entity}3**`], label)}

# generateOperations(entity, values, label)
-```
> Define phrase list for ${property} property.
@ phraselist ${property}Phrases(interchangeable)
${if(schema.properties[property].title,
    `\t- ${schema.properties[property].title}`,
     synonyms(property))}

> Define property entity and optional value for ${property} property.
@ ml ${property} usesFeature ${property}Phrases
    - @ ${entity} ${entity}

> Define operations on '${property}' property.
${defineOperation('Add', entity)}
${defineOperation('Remove', entity)}
${defineOperation('Clear', entity)}
${defineOperation('Show', entity)}
${defineOperation('Help', entity)}
${defineOperation('Change', entity)}

> Add examples for operations on the '${property}' property to the intent '${triggerIntent}'.
# ${triggerIntent}
${substitutions(`library-operations.${locale}.data`, 
    json(`{"propertyName": ${propertyList(property)}, 
           "value": ${valueList(values)}, 
           "label": ${labelList(entity, values)}, 
           "property": "${property}"}`), 
    3)}
```

# defineOperation(operation, entity)
-```
@ ml ${operation}() usesFeature ${operation}Phrases
\t-@ ml ${property} usesFeature ${property}
\t\t- @ ${entity} ${entity}
${if(entities[entity].length > 1, `\t- @ ${entity} ${entity}`, '')}```

# propertyList(property)
- [${join(foreach(phrases(property), phrase, `"${phrase}"`), ', ')}]

# labelList(entity, values)
- [${join(foreach(values, value, `"{@${entity}=${value}}"`), ', ')}]

# valueList(values)
- [${join(foreach(values, value, `"${value}"`), ', ')}]

# synonyms(value)
- ${join(foreach(phrases(value), phrase, `\t\t- ${phrase}`), EOL())}

> Top-level template support
# propertyTemplates
- ${[`${type}Property.lg`, `${type}-missing.dialog`, `${type}-clear.dialog`, `${type}-show.dialog`]}

# entityTemplates
- ${[`${entity}Entity.lu`, `${entity}Entity.lg`, `${entity}Entity-add-${type}.dialog`, `${entity}Entity-remove-${type}.dialog`]}

> This is useful when importing another .lg file in order to add prefix/locale
# importLG(name)
-[${prefix}-${name}.${locale}.lg](${prefix}-${name}.${locale}.lg)

# luHeader
-> !# @app.culture = ${locale}

> Schema definitions

# schemaOperations
- ${flatten(foreach(properties, property, [`Add(${property})`, `Remove(${property})`, `Clear(${property})`, `Show(${property})`]))}

# schemaDefaultOperation
- ${json(concat('{', join(foreach(properties, property, `"${property}": ${schemaDefaultOperationEntities(property)}`), ','), '}'))}

# schemaDefaultOperationEntities(property)
- ${concat('{', join(foreach(schema.properties[property].$entities, entity, `"${entity}": "Add(${property})"`), ','), '}')}

# designerName(name)
-, "$designer": {"name": "${name}"}

# designerOp(op)
- ${designerName(`${property} - ${op}()`)}

# designerOpEntity(op, entity)
- ${designerOpEntityProperty(op, entity, property)}

# designerOpEntityProperty(op, entity, property)
- ${designerName(`${property} - ${op}(@${entity})`)}

# designerChooseEntity()
- ${designerName(`${property}Entity - Choose()`)}

# designerChooseProperty(property)
- ${designerName(`${property} - ChooseProperty()`)}

# designerMissing(property)
- ${designerName(`${property} - Missing()`)}

# designerIntent(intent)
- ${designerName(`On${intent}`)}